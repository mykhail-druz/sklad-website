// import { parseStringPromise } from 'xml2js'
// import { supabase } from '@/lib/supabaseClient'
// import slugify from 'slugify'
//
// // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ UUID
// const isValidUUID = (id: string) => /^[0-9a-fA-F-]{36}$/.test(id)
//
// export async function importProductsFromXML(xmlUrl: string) {
//     return null
//     try {
//         console.log(`üîÑ –°—Ç–∞—Ä—Ç —ñ–º–ø–æ—Ä—Ç—É XML: ${xmlUrl}`)
//
//         const response = await fetch(xmlUrl)
//         if (!response.ok) {
//             throw new Error(
//                 `‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è XML: ${response.statusText}`
//             )
//         }
//
//         const xmlData = await response.text()
//         const result = await parseStringPromise(xmlData)
//
//         console.log(`‚úÖ XML —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!`)
//
//         // 1Ô∏è‚É£ **–ü–∞—Ä—Å–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏**
//         console.log('üîç –ü–æ—á–∏–Ω–∞—î–º–æ –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π...')
//         const categoriesMap = new Map<
//             string,
//             { name: string; slug: string; parentId: string | null }
//         >()
//         const categoriesSet = new Set<string>() // –ò—Å–ø–æ–ª—å–∑—É–µ–º Set –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–µ–π
//
//         result.yml_catalog.shop[0].categories[0].categories.forEach(
//             (cat: any) => {
//                 const id = cat.$.id
//                 const name = cat._
//                 let parentId = cat.$.parentId || null
//                 const slug = slugify(name, { lower: true, strict: true })
//
//                 // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ `parentId` –≤–∞–ª–∏–¥–Ω—ã–º UUID, –∏–Ω–∞—á–µ —Å—Ç–∞–≤–∏–º null
//                 if (parentId && !isValidUUID(parentId)) {
//                     console.warn(
//                         `‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π parent_id: ${parentId} ‚Üí –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ NULL`
//                     )
//                     parentId = null
//                 }
//
//                 categoriesMap.set(id, { name, slug, parentId })
//                 categoriesSet.add(
//                     JSON.stringify({ name, slug, parent_id: null })
//                 ) // –°—Ç–∞–≤–∏–º `null` –≤—Ä–µ–º–µ–Ω–Ω–æ
//             }
//         )
//
//         let categories = Array.from(categoriesSet).map((c) => JSON.parse(c))
//
//         console.log(`üìå –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: ${categories.length}`)
//         console.log('üìù –ü–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:', categories[0])
//
//         // 2Ô∏è‚É£ **–î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ Supabase**
//         console.log('üì° –î–æ–¥–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤ –±–∞–∑—É...')
//         const { data: insertedCategories, error: categoryError } =
//             await supabase
//                 .from('categories')
//                 .upsert(categories, { onConflict: 'slug' })
//                 .select('id, slug')
//
//         if (categoryError) {
//             console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', categoryError)
//             return {
//                 success: false,
//                 message: '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —ñ–º–ø–æ—Ä—Ç—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π.',
//             }
//         }
//
//         console.log(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ–¥–∞–Ω–æ!`)
//
//         // 3Ô∏è‚É£ **–û–±–Ω–æ–≤–ª—è–µ–º parent_id**
//         console.log('üîÑ –û–Ω–æ–≤–ª—é—î–º–æ parent_id...')
//         const slugToIdMap = Object.fromEntries(
//             insertedCategories.map((c) => [c.slug, c.id])
//         )
//
//         for (const categories of insertedCategories) {
//             const originalCategory = categoriesMap.get(categories.slug)
//             if (originalCategory && originalCategory.parentId) {
//                 const newParentId =
//                     slugToIdMap[
//                         categoriesMap.get(originalCategory.parentId)?.slug || ''
//                     ]
//                 if (newParentId) {
//                     await supabase
//                         .from('categories')
//                         .update({ parent_id: newParentId })
//                         .eq('id', categories.id)
//                 }
//             }
//         }
//
//         console.log(`‚úÖ parent_id –æ–Ω–æ–≤–ª–µ–Ω–æ!`)
//
//         // 4Ô∏è‚É£ **–ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã**
//         console.log('üõí –ü–æ—á–∏–Ω–∞—î–º–æ –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä—ñ–≤...')
//         const products = result.yml_catalog.shop[0].offers[0].offer.map(
//             (offer: any) => {
//                 const categoryData = categoriesMap.get(offer.categoryId[0])
//
//                 // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ parent_id, –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º subcategory_id
//                 const subcategoryId = categoryData?.parentId
//                     ? categorySlugToId[
//                           categoriesMap.get(categoryData.parentId)?.slug || ''
//                       ]
//                     : null
//
//                 return {
//                     id: offer.$.id,
//                     title: offer.name[0],
//                     price: parseFloat(offer.price[0]),
//                     description: offer.description?.[0] || '',
//                     image_url: offer.picture?.[0] || '',
//                     category_id: categorySlugToId[categoryData.slug] || null,
//                     subcategory_id: subcategoryId || null, // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
//                     created_at: new Date().toISOString(),
//                 }
//             }
//         )
//
//         console.log(`üì¶ –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤: ${products.length}`)
//         console.log('üìù –ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä:', products[0])
//
//         // 5Ô∏è‚É£ **–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã**
//         console.log('üì° –î–æ–¥–∞—î–º–æ —Ç–æ–≤–∞—Ä–∏ –≤ –±–∞–∑—É...')
//         const { error: productError } = await supabase
//             .from('products')
//             .upsert(products, { onConflict: 'id' })
//
//         if (productError) {
//             console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–æ–≤:', productError)
//             return {
//                 success: false,
//                 message: '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —ñ–º–ø–æ—Ä—Ç—É —Ç–æ–≤–∞—Ä—ñ–≤.',
//             }
//         }
//
//         console.log(`‚úÖ –¢–æ–≤–∞—Ä–∏ —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!`)
//         return { success: true, message: '–Ü–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!' }
//     } catch (error) {
//         console.error('üö® –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É:', error)
//         return { success: false, message: '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —ñ–º–ø–æ—Ä—Ç—É —Ç–æ–≤–∞—Ä—ñ–≤.' }
//     }
// }
